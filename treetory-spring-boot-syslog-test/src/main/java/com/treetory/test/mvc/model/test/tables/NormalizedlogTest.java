/*
 * This file is generated by jOOQ.
 */
package com.treetory.test.mvc.model.test.tables;


import com.treetory.test.mvc.model.test.Indexes;
import com.treetory.test.mvc.model.test.Test;
import com.treetory.test.mvc.model.test.tables.records.NormalizedlogTestRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;
import org.jooq.types.UInteger;
import org.jooq.types.ULong;
import org.jooq.types.UShort;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class NormalizedlogTest extends TableImpl<NormalizedlogTestRecord> {

    private static final long serialVersionUID = -817067189;

    /**
     * The reference instance of <code>test.NORMALIZEDLOG_TEST</code>
     */
    public static final NormalizedlogTest NORMALIZEDLOG_TEST = new NormalizedlogTest();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NormalizedlogTestRecord> getRecordType() {
        return NormalizedlogTestRecord.class;
    }

    /**
     * The column <code>test.NORMALIZEDLOG_TEST.id</code>.
     */
    public final TableField<NormalizedlogTestRecord, ULong> ID = createField("id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED, this, "");

    /**
     * The column <code>test.NORMALIZEDLOG_TEST.create_time</code>.
     */
    public final TableField<NormalizedlogTestRecord, Timestamp> CREATE_TIME = createField("create_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>test.NORMALIZEDLOG_TEST.dev_id</code>.
     */
    public final TableField<NormalizedlogTestRecord, ULong> DEV_ID = createField("dev_id", org.jooq.impl.SQLDataType.BIGINTUNSIGNED.nullable(false), this, "");

    /**
     * The column <code>test.NORMALIZEDLOG_TEST.dev_class</code>.
     */
    public final TableField<NormalizedlogTestRecord, String> DEV_CLASS = createField("dev_class", org.jooq.impl.SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>test.NORMALIZEDLOG_TEST.event_class</code>.
     */
    public final TableField<NormalizedlogTestRecord, String> EVENT_CLASS = createField("event_class", org.jooq.impl.SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>test.NORMALIZEDLOG_TEST.event</code>.
     */
    public final TableField<NormalizedlogTestRecord, String> EVENT = createField("event", org.jooq.impl.SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>test.NORMALIZEDLOG_TEST.org_id</code>.
     */
    public final TableField<NormalizedlogTestRecord, Integer> ORG_ID = createField("org_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>test.NORMALIZEDLOG_TEST.proxy_id</code>.
     */
    public final TableField<NormalizedlogTestRecord, Integer> PROXY_ID = createField("proxy_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>test.NORMALIZEDLOG_TEST.origin_ip</code>.
     */
    public final TableField<NormalizedlogTestRecord, UInteger> ORIGIN_IP = createField("origin_ip", org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, "");

    /**
     * The column <code>test.NORMALIZEDLOG_TEST.host_name</code>.
     */
    public final TableField<NormalizedlogTestRecord, String> HOST_NAME = createField("host_name", org.jooq.impl.SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>test.NORMALIZEDLOG_TEST.interface</code>.
     */
    public final TableField<NormalizedlogTestRecord, String> INTERFACE = createField("interface", org.jooq.impl.SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>test.NORMALIZEDLOG_TEST.protocol_name</code>.
     */
    public final TableField<NormalizedlogTestRecord, String> PROTOCOL_NAME = createField("protocol_name", org.jooq.impl.SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>test.NORMALIZEDLOG_TEST.protocol_number</code>.
     */
    public final TableField<NormalizedlogTestRecord, UByte> PROTOCOL_NUMBER = createField("protocol_number", org.jooq.impl.SQLDataType.TINYINTUNSIGNED, this, "");

    /**
     * The column <code>test.NORMALIZEDLOG_TEST.service_name</code>.
     */
    public final TableField<NormalizedlogTestRecord, String> SERVICE_NAME = createField("service_name", org.jooq.impl.SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>test.NORMALIZEDLOG_TEST.s_ip</code>.
     */
    public final TableField<NormalizedlogTestRecord, UInteger> S_IP = createField("s_ip", org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, "");

    /**
     * The column <code>test.NORMALIZEDLOG_TEST.s_port</code>.
     */
    public final TableField<NormalizedlogTestRecord, UShort> S_PORT = createField("s_port", org.jooq.impl.SQLDataType.SMALLINTUNSIGNED, this, "");

    /**
     * The column <code>test.NORMALIZEDLOG_TEST.d_ip</code>.
     */
    public final TableField<NormalizedlogTestRecord, UInteger> D_IP = createField("d_ip", org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, "");

    /**
     * The column <code>test.NORMALIZEDLOG_TEST.d_port</code>.
     */
    public final TableField<NormalizedlogTestRecord, UShort> D_PORT = createField("d_port", org.jooq.impl.SQLDataType.SMALLINTUNSIGNED, this, "");

    /**
     * The column <code>test.NORMALIZEDLOG_TEST.severity</code>.
     */
    public final TableField<NormalizedlogTestRecord, UShort> SEVERITY = createField("severity", org.jooq.impl.SQLDataType.SMALLINTUNSIGNED, this, "");

    /**
     * The column <code>test.NORMALIZEDLOG_TEST.rule_id</code>.
     */
    public final TableField<NormalizedlogTestRecord, String> RULE_ID = createField("rule_id", org.jooq.impl.SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>test.NORMALIZEDLOG_TEST.action</code>.
     */
    public final TableField<NormalizedlogTestRecord, String> ACTION = createField("action", org.jooq.impl.SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>test.NORMALIZEDLOG_TEST.sequence</code>.
     */
    public final TableField<NormalizedlogTestRecord, String> SEQUENCE = createField("sequence", org.jooq.impl.SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>test.NORMALIZEDLOG_TEST.nat_s_ip</code>.
     */
    public final TableField<NormalizedlogTestRecord, UInteger> NAT_S_IP = createField("nat_s_ip", org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, "");

    /**
     * The column <code>test.NORMALIZEDLOG_TEST.nat_s_port</code>.
     */
    public final TableField<NormalizedlogTestRecord, UShort> NAT_S_PORT = createField("nat_s_port", org.jooq.impl.SQLDataType.SMALLINTUNSIGNED, this, "");

    /**
     * The column <code>test.NORMALIZEDLOG_TEST.nat_d_ip</code>.
     */
    public final TableField<NormalizedlogTestRecord, UInteger> NAT_D_IP = createField("nat_d_ip", org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, "");

    /**
     * The column <code>test.NORMALIZEDLOG_TEST.nat_d_port</code>.
     */
    public final TableField<NormalizedlogTestRecord, UShort> NAT_D_PORT = createField("nat_d_port", org.jooq.impl.SQLDataType.SMALLINTUNSIGNED, this, "");

    /**
     * The column <code>test.NORMALIZEDLOG_TEST.nat_rule</code>.
     */
    public final TableField<NormalizedlogTestRecord, String> NAT_RULE = createField("nat_rule", org.jooq.impl.SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>test.NORMALIZEDLOG_TEST.start_time</code>.
     */
    public final TableField<NormalizedlogTestRecord, Timestamp> START_TIME = createField("start_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>test.NORMALIZEDLOG_TEST.end_time</code>.
     */
    public final TableField<NormalizedlogTestRecord, Timestamp> END_TIME = createField("end_time", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * The column <code>test.NORMALIZEDLOG_TEST.duration</code>.
     */
    public final TableField<NormalizedlogTestRecord, UInteger> DURATION = createField("duration", org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, "");

    /**
     * The column <code>test.NORMALIZEDLOG_TEST.event_count</code>.
     */
    public final TableField<NormalizedlogTestRecord, UInteger> EVENT_COUNT = createField("event_count", org.jooq.impl.SQLDataType.INTEGERUNSIGNED, this, "");

    /**
     * The column <code>test.NORMALIZEDLOG_TEST.rule_group</code>.
     */
    public final TableField<NormalizedlogTestRecord, String> RULE_GROUP = createField("rule_group", org.jooq.impl.SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>test.NORMALIZEDLOG_TEST.rule_name</code>.
     */
    public final TableField<NormalizedlogTestRecord, String> RULE_NAME = createField("rule_name", org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>test.NORMALIZEDLOG_TEST.signature_name</code>.
     */
    public final TableField<NormalizedlogTestRecord, String> SIGNATURE_NAME = createField("signature_name", org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * The column <code>test.NORMALIZEDLOG_TEST.mac_addr</code>.
     */
    public final TableField<NormalizedlogTestRecord, String> MAC_ADDR = createField("mac_addr", org.jooq.impl.SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>test.NORMALIZEDLOG_TEST.direction</code>.
     */
    public final TableField<NormalizedlogTestRecord, Integer> DIRECTION = createField("direction", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>test.NORMALIZEDLOG_TEST.tx_bytes</code>.
     */
    public final TableField<NormalizedlogTestRecord, Integer> TX_BYTES = createField("tx_bytes", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>test.NORMALIZEDLOG_TEST.rx_bytes</code>.
     */
    public final TableField<NormalizedlogTestRecord, Integer> RX_BYTES = createField("rx_bytes", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>test.NORMALIZEDLOG_TEST.user_name</code>.
     */
    public final TableField<NormalizedlogTestRecord, String> USER_NAME = createField("user_name", org.jooq.impl.SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>test.NORMALIZEDLOG_TEST.reserved</code>.
     */
    public final TableField<NormalizedlogTestRecord, String> RESERVED = createField("reserved", org.jooq.impl.SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>test.NORMALIZEDLOG_TEST.etc</code>.
     */
    public final TableField<NormalizedlogTestRecord, String> ETC = createField("etc", org.jooq.impl.SQLDataType.VARCHAR(128), this, "");

    /**
     * Create a <code>test.NORMALIZEDLOG_TEST</code> table reference
     */
    public NormalizedlogTest() {
        this(DSL.name("NORMALIZEDLOG_TEST"), null);
    }

    /**
     * Create an aliased <code>test.NORMALIZEDLOG_TEST</code> table reference
     */
    public NormalizedlogTest(String alias) {
        this(DSL.name(alias), NORMALIZEDLOG_TEST);
    }

    /**
     * Create an aliased <code>test.NORMALIZEDLOG_TEST</code> table reference
     */
    public NormalizedlogTest(Name alias) {
        this(alias, NORMALIZEDLOG_TEST);
    }

    private NormalizedlogTest(Name alias, Table<NormalizedlogTestRecord> aliased) {
        this(alias, aliased, null);
    }

    private NormalizedlogTest(Name alias, Table<NormalizedlogTestRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> NormalizedlogTest(Table<O> child, ForeignKey<O, NormalizedlogTestRecord> key) {
        super(child, key, NORMALIZEDLOG_TEST);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Test.TEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.NORMALIZEDLOG_TEST_CREATE_TIME, Indexes.NORMALIZEDLOG_TEST_DEV_ID, Indexes.NORMALIZEDLOG_TEST_D_IP, Indexes.NORMALIZEDLOG_TEST_ID, Indexes.NORMALIZEDLOG_TEST_S_IP);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NormalizedlogTest as(String alias) {
        return new NormalizedlogTest(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public NormalizedlogTest as(Name alias) {
        return new NormalizedlogTest(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public NormalizedlogTest rename(String name) {
        return new NormalizedlogTest(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public NormalizedlogTest rename(Name name) {
        return new NormalizedlogTest(name, null);
    }
}
